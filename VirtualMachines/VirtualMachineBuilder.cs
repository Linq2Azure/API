using System;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Threading.Tasks;
using Linq2Azure.CloudServices;

namespace Linq2Azure.VirtualMachines
{
    public class VirtualMachineBuilder : IVirtualMachineBuilder, IRoleBuilder, ISpecifyMediaForOS, IWindowsConfigurationSetBuilder, IWindowsConfigurationGuidedConfiguration,
                                         INetworkConfigurationSetBuilder, ILinuxConfigurationSetBuilder,ILinuxConfigurationGuided , IRoleOSVirtualHardDisk, IDataDiskConfigurationBuilder,
                                         ISpecificDataDiskConfigurationBuilder, IGuidedSpecificDataDiskConfiguration, ISpecifyOperatingSystem
    {

        public Deployment Deployment { get; set; }

        public VirtualMachineBuilder(CloudService cloudService, string deploymentName)
        {
            Deployment = new Deployment(cloudService, DeploymentSlot.Production, deploymentName, deploymentName);
        }

        #region Helpers

        private Role GetCurrentRole()
        {
            Contract.Requires(Deployment != null);
            Contract.Requires(Deployment.RoleList.Any());

            return Deployment.RoleList[Deployment.RoleList.Count - 1];
        }

        private ConfigurationSet GetCurrentConfigurationSet()
        {
            var currentRole = GetCurrentRole();

            Contract.Requires(currentRole.ConfigurationSets.Any());

            return currentRole.ConfigurationSets[currentRole.ConfigurationSets.Count - 1];
        }

        private DataVirtualHardDisk GetCurrentDataDisk()
        {

            var currentRole = GetCurrentRole();

            Contract.Requires(currentRole.DataVirtualHardDisks.Any());

            return Deployment.RoleList[Deployment.RoleList.Count - 1].DataVirtualHardDisks[currentRole.DataVirtualHardDisks.Count - 1];
        }

        private AzureRestClient GetRestClient()
        {
            var servicePath = "services/hostedservices/" + Deployment.CloudService.Name + "/deployments";
            var client = Deployment.CloudService.Subscription.GetDatabaseRestClient(servicePath);
            return client;
        }

        #endregion

        #region Role Related Methods

        public IRoleBuilder AddRole(string roleName, RoleSize roleSize = RoleSize.Small)
        {
            Deployment.RoleList.Add(new Role(Role.VirtualMachineRoleType, roleName, roleSize, this));
            return this;
        }

        public async Task Provision()
        {
            var client = GetRestClient();
            var response = await client.PostAsync(new VirtualMachinePayloadBuilder(Deployment).CreatePostPayload());
            await Deployment.CloudService.Subscription.WaitForOperationCompletionAsync(response);
        }

        #endregion

        #region Operating System Disk

        public IRoleOSVirtualHardDisk WithOSHardDisk(OperationSystemDiskLabel label, HostCaching caching = HostCaching.None)
        {
            var currentRole = GetCurrentRole();
            Contract.Requires(label != null);
            Contract.Requires(currentRole != null);
            
            currentRole.OSVirtualHardDisk = new OSVirtualHardDisk(label.Label,caching);
            return this;
        }

        public ISpecifyMediaForOS WithDiskName(string name)
        {
            var currentRole = GetCurrentRole();
            Contract.Requires(currentRole != null);

            currentRole.OSVirtualHardDisk.AssignDiskName(name);
            return this;
        }

        public ISpecifyMediaForOS WithAutoGeneratedDiskName()
        {
            return this;
        }

        ISpecifyOperatingSystem ISpecifyMediaForOS.WithOSMedia(Os operatingSystem, OsDriveBlobStoredAt operatingSystemLocation)
        {

            var currentRole = GetCurrentRole();

            Contract.Requires(operatingSystemLocation != null);
            Contract.Requires(currentRole != null);
            Contract.Requires(currentRole.OSVirtualHardDisk != null);

            currentRole.OSVirtualHardDisk.AssignMedia(operatingSystem.OsName,operatingSystemLocation.Location.ToString());

            currentRole.OsVersion = true;
            return this;
        }

        ISpecifyOperatingSystem ISpecifyMediaForOS.WithImageMedia(ImageName image, OsDriveBlobStoredAt operatingSystemDriveBlobStoredAt)
        {
            var currentRole = GetCurrentRole();

            Contract.Requires(image != null);
            Contract.Requires(operatingSystemDriveBlobStoredAt != null);
            Contract.Requires(currentRole != null);
            Contract.Requires(currentRole.OSVirtualHardDisk != null);

            currentRole.OsVersion = false;
            currentRole.OSVirtualHardDisk.AssignMedia(image.OsName,operatingSystemDriveBlobStoredAt.Location.ToString());
            return this;
        }

        #endregion

        #region Windows Configuration


        public IWindowsConfigurationSetBuilder AddWindowsConfiguration(ComputerName computerName, Administrator administrator, Password password)
        {

            GetCurrentRole().ConfigurationSets.Add(new ConfigurationSet
            {
                EnableAutomaticUpdates = false,
                ComputerName = computerName.Value,
                AdminUsername = administrator.Value,
                AdminPassword = password.Value,
                ConfigurationSetType = ConfigurationSetType.WindowsProvisioningConfiguration
            });
            return this;
        }

        public IWindowsConfigurationGuidedConfiguration WithAdditionalWindowsSettings(Action<AdditionalWindowsSettings> setting)
        {
            var additionalSettings = new AdditionalWindowsSettings();
            setting(additionalSettings);

            GetCurrentConfigurationSet().EnableAutomaticUpdates = additionalSettings.EnableAutomaticUpdates;
            GetCurrentConfigurationSet().ResetPasswordOnFirstLogin = additionalSettings.ResetPasswordOnFirstLogin;
            return this;
        }

        #endregion

        #region Network Configuration

        public INetworkConfigurationSetBuilder AddNetworkConfiguration()
        {

            var autoAddSsh = !(GetCurrentConfigurationSet().DisableSshPasswordAuthentication);

            GetCurrentRole().ConfigurationSets.Add(new ConfigurationSet
            {
                ConfigurationSetType = ConfigurationSetType.NetworkConfiguration
            });

            return autoAddSsh ? AddSSH() : this;
        }

        public INetworkConfigurationSetBuilder AddRemoteDesktop()
        {
            GetCurrentConfigurationSet().InputEndpoints.Add(new InputEndpoint
            {
                LocalPort = 3389,
                Port = 3389,
                Name = "RDP",
                Protocol = Protocol.TCP
            });
            return this;
        }

        public INetworkConfigurationSetBuilder AddWebPort()
        {
            GetCurrentConfigurationSet().InputEndpoints.Add(new InputEndpoint
            {
                LocalPort = 80,
                Port = 80,
                Name = "HTTP",
                Protocol = Protocol.TCP
            });
            return this;
        }

        public INetworkConfigurationSetBuilder AddSSH()
        {

            if (GetCurrentConfigurationSet().InputEndpoints.Any(x => x.Name == "SSH"))
                return this;

            GetCurrentConfigurationSet().InputEndpoints.Add(new InputEndpoint
            {
                LocalPort = 22,
                Port = 22,
                Name = "SSH",
                Protocol = Protocol.TCP
            });
            return this;
        }

        public INetworkConfigurationSetBuilder AddPowershell()
        {
            GetCurrentConfigurationSet().InputEndpoints.Add(new InputEndpoint
            {
                LocalPort = 5986,
                Port = 5986,
                Name = "PowerShell",
                Protocol = Protocol.TCP
            });
            return this;
        }

        public INetworkConfigurationSetBuilder AddCustomPort(string name, Protocol protocol, int localPort, int remotePort)
        {
            GetCurrentConfigurationSet().InputEndpoints.Add(new InputEndpoint
            {
                LocalPort = localPort,
                Port = remotePort,
                Name = name,
                Protocol = protocol
            });
            return this;
        }

        public INetworkConfigurationSetBuilder AddCustomPort(string name, Protocol protocol, int localPort)
        {
            return AddCustomPort(name, protocol, localPort, localPort);
        }

        #endregion

        #region Linux Configuration

        public ILinuxConfigurationSetBuilder AddLinuxConfiguration(Hostname hostname, Administrator administrator, Password password)
        {
            GetCurrentRole().ConfigurationSets.Add(new ConfigurationSet
            {
                ConfigurationSetType = ConfigurationSetType.LinuxProvisioningConfiguration,
                HostName = hostname.Value,
                UserName = administrator.Value,
                UserPassword = password.Value
            });
            return this;
        }

        public ILinuxConfigurationGuided WithAdditionalLinuxSettings(Action<AdditionaLinuxSettings> setting)
        {
            var settings = new AdditionaLinuxSettings();
            setting(settings);

            GetCurrentConfigurationSet().DisableSshPasswordAuthentication = !settings.EnableSSH;

            return this;
        }

        #endregion

        #region Data Disk Configuration

        public IDataDiskConfigurationBuilder AddDisk(DiskLabel label)
        {
            GetCurrentRole().DataVirtualHardDisks.Add(new DataVirtualHardDisk
            {
                DiskLabel = label.Label,
                HostCaching = HostCaching.None
            });
            return this;
        }

        public ISpecificDataDiskConfigurationBuilder Existing(string name)
        {
            GetCurrentDataDisk().DiskName = name;
            return this;
        }

        public ISpecificDataDiskConfigurationBuilder IsNew()
        {
            return this;
        }

        public IGuidedSpecificDataDiskConfiguration StoredAt(DriveStoredAt location)
        {
            var current = GetCurrentDataDisk();
            current.MediaLink = location.Location.ToString();
            return this;
        }

        public IGuidedSpecificDataDiskConfiguration WithAdditionalDiskSettings(Action<AdditionalDiskSettings> settings)
        {
            var additionalDiskSettings = new AdditionalDiskSettings();
            settings(additionalDiskSettings);

            var current = GetCurrentDataDisk();
            current.LogicalDiskSizeInGB = additionalDiskSettings.SizeInGB;
            current.Lun = additionalDiskSettings.Lun;
            current.HostCaching = current.HostCaching;

            return this;
        }


        #endregion

        
    }
}